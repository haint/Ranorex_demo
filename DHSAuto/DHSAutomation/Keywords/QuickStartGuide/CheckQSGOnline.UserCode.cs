///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;

using DHSAutomation.Common;
using DHSAutomation.Objects;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using WinForms = System.Windows.Forms;

namespace DHSAutomation.Keywords.QuickStartGuide
{
	public partial class CheckQSGOnline
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void ClickManualsTab()
		{
			DHSTranslateReader reader = new DHSTranslateReader();
			Dictionary<string, string> leftmenutexts = reader.GetLeftMenuText();
			string manuals = leftmenutexts["Manuals"];
			Text manualsTab = repo.DHSMainWindow.LeftMenuListbox.FindSingle<Text>(@"./listitem/text[@text='"+manuals+"']");
			manualsTab.Click();
			Delay.Milliseconds(2000);
		}

		public void ClickQuickStartGuide()
		{
			DHSTranslateReader reader = new DHSTranslateReader();
			Dictionary<string, string> navPanel = reader.GetNavigationPanelText("Manuals");
			string qsg = navPanel["QuickStartGuide"];
			Text qsgText = repo.DHSMainWindow.NavigationPanel.FindSingle<Text>(@"./button/text[@text='"+qsg+"']");
			qsgText.Click();
			Delay.Milliseconds(1000);
		}
		
		public void CheckPDFOpen()
		{
			//check if ms edge open & pdf file is loaded
			repo.MicrosoftEdge.SelfInfo.WaitForExists(5000);
			//get the file name
			string address = repo.MicrosoftEdge.AddressEditBox.TextValue;
			address = WebUtility.UrlDecode(address);
			System.Console.WriteLine(address);
			string osLanguage = Utils.GetOSLanguage().Name.ToLower();
			
			Regex r = new Regex(@"(file:[/]*)(C:.*[/])StartGuide([0-9]*)-(.*).pdf");
			Match m = r.Match(address);
			if(m.Success){
				// address same as expected
				Group g = m.Groups[2];
				string path= g.ToString();
				System.Console.WriteLine(g.ToString());
				string expectedLocation = @"C:/ProgramData/Dell/Dell Help & Support/StartGuide";
				Report.Log((path == expectedLocation)?ReportLevel.Success:ReportLevel.Failure,
				           "Check Quick Start Guided is loaded from folder Expected: {" + expectedLocation +"}, " +
				           "Actual folder: {" + path + "}");
				
				g = m.Groups[4];
				string language = g.ToString().ToLower();
				
				System.Console.WriteLine(g.ToString());
				Report.Log((language == osLanguage)?ReportLevel.Success:ReportLevel.Failure,
				           "Check Quick Start Guided file name contain language-code Expected: {" + osLanguage +"}, " +
				           "Actual language code: {" + language + "}");
			}
			else{
				Report.Log(ReportLevel.Failure, "URL not match as expected");
			}
			//maximize
			repo.MicrosoftEdge.TitleBar.Click(System.Windows.Forms.MouseButtons.Right);
			Delay.Milliseconds(1000);
			if(repo.Menu.Maximize.Enabled){
				repo.Menu.Maximize.Click();
				Delay.Milliseconds(1000);
			}
			else{
				Keyboard.Press("{Escape}");
				Delay.Milliseconds(1000);
			}
			// zoom in/out
			for(int i= 0; i < 2; i++){
				Keyboard.Press("{LControlKey down}{OemMinus}{LControlKey up}");
				Delay.Milliseconds(200);
			}
			
			for(int i= 0; i < 5; i++){
				Keyboard.Press("{LControlKey down}{Oemplus}{LControlKey up}");
				Delay.Milliseconds(200);
			}
		}
		
		public void CheckPDFLanguage()
		{
			//get the file name
			string address = repo.MicrosoftEdge.AddressEditBox.TextValue;
			address = WebUtility.UrlDecode(address);
			System.Console.WriteLine(address);
			string osLanguage = Utils.GetOSLanguage().Name.ToLower();
			// check language
			
			string pdfText = Utils.ExtractTextFromPdf(address);
			Dictionary<string, float> detectedLanguages = null;
			string osLanguageCode = osLanguage.Substring(0,2);
			string[] lines = pdfText.Split('\n');
			bool inOSLang = true;
			//int i = 0;
			foreach(string line in lines){
				//if(i++ > 20){
				//	break;
				//}
				detectedLanguages = Utils.InWhichLanguages(line);
				
				if(detectedLanguages.Count > 0 && !detectedLanguages.ContainsKey(osLanguageCode)){
					string detectedLanguageNames = "";
					foreach(string key in detectedLanguages.Keys){
						string lang = (new CultureInfo(key)).DisplayName;
						detectedLanguageNames += "[" + lang + ", confident:" + detectedLanguages[key] + "], ";
					}
					
					inOSLang = false;
					Report.Log(ReportLevel.Failure,
					           "Detected QSG PDF file contains string not in Expected language: {" + Utils.GetOSLanguage().DisplayName +"}, " +
					           "but in following languages: {" + detectedLanguageNames + "} " +
					           "Refer string: " + line);
				}
			}
			if(inOSLang == true){
				Report.Log(ReportLevel.Success, "QSG PDF file is in Expected language: {" + Utils.GetOSLanguage().DisplayName +"}");
			}
		}
		
		public void ClickViewAllManuals()
		{
			DHSTranslateReader reader = new DHSTranslateReader();
			Dictionary<string, string> navPanel = reader.GetNavigationPanelText("Manuals");
			string viewAllManuals = navPanel["ViewAllManuals"];
			viewAllManuals = viewAllManuals.Replace(@"{0}", Utils.GetPlatformName());
			Text viewAllText = repo.DHSMainWindow.NavigationPanel.FindSingle<Text>(@"./button/text[@text='"+viewAllManuals+"']");
			viewAllText.Click();
			Delay.Milliseconds(2000);
		}

		public void OpenDellAgentLog()
		{
			Utils.OpenFile(@"C:\ProgramData\Dell\Dell Help & Support\DellAgent.MDLC.00.log");
			Delay.Milliseconds(1000);
		}

		public void CheckQSGWebServiceURL()
		{
			Keyboard.Press("{LControlKey down}{Fkey}{LControlKey up}");
			Delay.Milliseconds(500);
			string searchText = @"https://api.dell.com/support/manuals";
			repo.Find.SearchBox.PressKeys(searchText);
			repo.Find.SearchBox.PressKeys("{Enter}");
			try{
				repo.Notepad.MessageInfo.WaitForExists(3000);
				// click close
				repo.Notepad.ButtonOK.Click();
				Report.Log(ReportLevel.Failure, "QSG Web Service URL NOT found in Log file");
			}
			catch(RanorexException ex){
				Report.Log(ReportLevel.Success, "QSG Web Service URL found in Log file");
			}
			repo.Find.Close.Click();
			Delay.Milliseconds(1000);
		}

		public void CheckQSGDownloadURL()
		{
			Keyboard.Press("{LControlKey down}{Fkey}{LControlKey up}");
			Delay.Milliseconds(500);
			string searchText = Utils.GetOSLanguage().DisplayName + @"</Culture><DocumentLocation>http://downloads.dell.com/Manuals";
			repo.Find.SearchBox.PressKeys(searchText);
			repo.Find.SearchBox.PressKeys("{Enter}");
			try{
				repo.Notepad.MessageInfo.WaitForExists(3000);
				// click close
				repo.Notepad.ButtonOK.Click();
				Report.Log(ReportLevel.Failure, "QSG download URL NOT found in Log file");
			}
			catch(RanorexException ex){
				Report.Log(ReportLevel.Success, "QSG download URL found in Log file");
			}
			repo.Find.Close.Click();
			Delay.Milliseconds(1000);
		}

		public void CheckDellSupportOpenIE()
		{
			Delay.Milliseconds(5000);
			try{
				repo.IE.TitleBarInfo.WaitForExists(5000);
				string title = repo.IE.TitleBar.Text;
				if(title.Contains("Product Support")){
					Report.Log(ReportLevel.Success, "Product Support page is Opened in IE");
					// check page title
					string header = repo.DellSupport.ProductSupportDellUS.ProductSupport.InnerText;
					string manualHeaderText = repo.DellSupport.ProductSupportDellUS.H2TagManualsTitle.InnerText;
					string manualHeaderExpected = "Manuals & documentation for your " + varPlatformName;
					if(manualHeaderText.Contains(manualHeaderExpected)){
						Report.Log(ReportLevel.Success, "Manual section is opened with title: " + manualHeaderText);
					}
					else{
						Report.Log(ReportLevel.Failure, "Manual section is NOT opened OR opened with unExpected title: " + manualHeaderText);
					}
				}
				else{
					Report.Log(ReportLevel.Failure, "Product Support page is NOT Opened in IE");
				}
				
				repo.IE.Close.Click();
			}
			catch(RanorexException ex){
				Report.Log(ReportLevel.Failure, "IE not opened OR some error happended");
				throw;
			}
		}
	}
}