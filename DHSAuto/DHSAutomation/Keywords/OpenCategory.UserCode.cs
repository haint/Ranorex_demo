///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;

using DHSAutomation.Common;
using DHSAutomation.Objects;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using WinForms = System.Windows.Forms;

using DHSAutomation.Objects;

namespace DHSAutomation.Keywords
{
    public partial class OpenCategory
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void CheckLanguage() 
        {
        	string osLanguage = Utils.GetOSLanguage().TwoLetterISOLanguageName;
        	//string regionStr = Utils.GetCurrentGEOLocationCountry().Trim();
        	
        	Report.Log(ReportLevel.Info, "The current OS Language is " + osLanguage);
        	//Report.Log(ReportLevel.Info, "The current Region is " + regionStr);
        	
//        	var countryCodesMapping = new Dictionary<string, RegionInfo>();
//        	CultureInfo[] cultures = CultureInfo.GetCultures(CultureTypes.SpecificCultures);
//            foreach (var culture in cultures)
//            {
//            	var region = new RegionInfo(culture.LCID);
//            	countryCodesMapping[region.EnglishName] = region;
//            }
            
            //string regionCode = countryCodesMapping[regionStr].TwoLetterISORegionName.ToLower();
			//Report.Log(ReportLevel.Info, "The region code is: " + regionCode);
            
        	SpanTag body= Host.Local.FindSingle<SpanTag>(@"/dom//h1[#'pspagetitle']/span", 5000);
//			
			string articleText = DHSArticle.StripHTML(body.GetInnerHtml());
			Report.Log(ReportLevel.Info, "The text present is `" + articleText + "`");
			
			Dictionary<string, float> detectedLanguages = Utils.InWhichLanguages(articleText);
			string languageCode = detectedLanguages.Keys.First();
			Report.Log(ReportLevel.Info, "The detected language is " + languageCode);
			
			//url = "http://www.dell.com/support/home/" + regionCode + "/" + languageCode + "/vnbsdt1/product-support/servicetag/5RQTQX1";
			string langUrl = url.Substring("http://www.dell.com/support/home/".Length + 3, 2);
			//string expectedUrl = "http://www.dell.com/support/home/" + regionCode + "/" + languageCode;
			Ranorex.Validate.AreEqual(langUrl, osLanguage.Equals("ko")? "en" : osLanguage);
			Report.Log(ReportLevel.Info, langUrl);
        }
        
        public void checkIE(){
//        	if IE run the first time, check "use recommend ..." and click ok
			firstRun fr = new firstRun();
			fr.checkIEForm();
        }
        
    }
}