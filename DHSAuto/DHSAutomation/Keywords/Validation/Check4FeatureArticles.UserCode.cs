///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using DHSAutomation.Common;
using DHSAutomation.Objects;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using WinForms = System.Windows.Forms;

namespace DHSAutomation.Keywords.Validation
{
	public partial class Check4FeatureArticles
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void CheckFeatureArticles()
		{
			for(int i=1; i<5; i++){
				int j=1; if(i==1){j=2;}
				Button button = repo.DHSMainWindow.CarouselImageButtonTwo.FindSingle<Button>("./following-sibling::button[]["+j+"]");
				button.Click();
				Delay.Milliseconds(1000);
				// get the article title
				string title1 = repo.DHSMainWindow.CarouselImageButton.FindSingle<Text>("./text[2]").TextValue;
				string title2 = repo.DHSMainWindow.CarouselImageButtonTwo.FindSingle<Text>("./text[2]").TextValue;
				
				button = repo.DHSMainWindow.CarouselImageButtonTwo.FindSingle<Button>("./following-sibling::button[]["+i+"]");
				button.Click();
				Delay.Milliseconds(1000);
				// get the article title
				string title3 = repo.DHSMainWindow.CarouselImageButton.FindSingle<Text>("./text[2]").TextValue;
				string title4 = repo.DHSMainWindow.CarouselImageButtonTwo.FindSingle<Text>("./text[2]").TextValue;

				Button picbutton = repo.DHSMainWindow.CarouselImageButton;
				string title = title3;
				if(title1 == title3){
					title = title4;
					picbutton = repo.DHSMainWindow.CarouselImageButtonTwo;
				}
				System.Console.WriteLine(title);
				
				picbutton.Click();
				Delay.Milliseconds(1000);
								
				Dictionary<string, string> dict = GetArticleNameFromTitle(title);
				DHSCategory.CheckCategoryOnLeftMenu(dict["category"]);
				DHSArticle.CheckArticleOnContentPanel(dict["category"], dict["article"]);
				// back
				repo.DHSMainWindow.BackButton.Click();
			}
		}

		public Dictionary<string, string> GetArticleNameFromTitle(string title){
			DHSTranslateReader reader = new DHSTranslateReader();
			Dictionary<string, Object> categories = reader.GetCategories();
			Dictionary<string, string> dict = new Dictionary<string, string>();
			foreach(string key in categories.Keys){
				Dictionary<string, Object> category = (Dictionary<string, Object>)categories[key];
				Dictionary<string, Object> articles = (Dictionary<string, Object>)category["articles"];
				foreach(string key1 in articles.Keys){
					if(key1 == "#first"){
						continue;
					}
					Dictionary<string, Object> article = (Dictionary<string, Object>)articles[key1];
					if(article.ContainsKey("featuretitle")){
						string artitle = (String)article["featuretitle"];
						if(artitle.Trim()!= "" && artitle.Trim().ToLower() == title.Trim().ToLower()){
							dict.Add("category", key);
							dict.Add("article", key1);
							return dict;
						}
					}
					else{
						string artitle = (String)article["title"];
						if(artitle.Trim().ToLower() == title.Trim().ToLower()){
							dict.Add("category", key);
							dict.Add("article", key1);
							return dict;
						}
						Dictionary<string, Object> content =  (Dictionary<string, Object>)article["content"];
						string arheader = (String)content["header"];
						if(arheader.Trim().ToLower() == title.Trim().ToLower()){
							dict.Add("category", key);
							dict.Add("article", key1);
							return dict;
						}
					}
				}
			}
			/*
			foreach(string key in categories.Keys){
				Dictionary<string, Object> category = (Dictionary<string, Object>)categories[key];
				Dictionary<string, Object> articles = (Dictionary<string, Object>)category["articles"];
				foreach(string key1 in articles.Keys){
					if(key1 == "#first"){
						continue;
					}
					Dictionary<string, Object> article = (Dictionary<string, Object>)articles[key1];
					string artitle = (String)article["title"];
					if(artitle.Trim().ToLower() == title.Trim().ToLower()){
						dict.Add("category", key);
						dict.Add("article", key1);
						return dict;
					}
				}
			}
			foreach(string key in categories.Keys){
				Dictionary<string, Object> category = (Dictionary<string, Object>)categories[key];
				Dictionary<string, Object> articles = (Dictionary<string, Object>)category["articles"];
				foreach(string key1 in articles.Keys){
					if(key1 == "#first"){
						continue;
					}
					Dictionary<string, Object> article = (Dictionary<string, Object>)articles[key1];
					Dictionary<string, Object> content =  (Dictionary<string, Object>)article["content"];
					string arheader = (String)content["header"];
					if(arheader.Trim().ToLower() == title.Trim().ToLower()){
						dict.Add("category", key);
						dict.Add("article", key1);
						return dict;
					}
				}
			}
			 */
			return null;
		}
	}
}