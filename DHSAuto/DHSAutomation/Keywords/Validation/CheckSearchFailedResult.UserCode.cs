///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace DHSAutomation.Keywords.Validation
{
	public partial class CheckSearchFailedResult
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void CheckSearchFailed()
		{
			//TODO search for the last item match
			IList<TrTag> trList = repo.DellApplicationWebServiceDAWS.Self.Find<TrTag>(@".//div[#'daws-body']/table//td[@innertext~'Learning Center']/following-sibling::td[@innertext~'CustomEvent']/parent::tr");
			
			try
			{
				TrTag lastTr = trList[trList.Count - 1];
				lastTr.MoveTo();
				ATag link = lastTr.FindSingle<ATag>("./td[1]/a");
				link.MoveTo();
				link.Click(Location.UpperRight);
			}catch(Exception){
				Report.Failure("There are no event for check Service Tag - ApplicationName - AppVersion - EventTypeName - EventCreateDateTime - Event DateTime.");
				return;
			}
			
			DdTag ddtag = repo.DellApplicationWebServiceDAWS.DtTagAdditionalData1.FindSingle<DdTag>("./following-sibling::dd[][1]");
			ddtag.MoveTo();
			string ddtext = ddtag.InnerText.Trim();
			Validate.AreEqual(ddtext, "Search item not found", "Check Custom Event has AdditionalData1, actual = {0}, expect = {1}");
			
			// event details
			// service tag
			try
			{
				ATag atag = repo.DellApplicationWebServiceDAWS.DtTagServiceTag.FindSingle<ATag>("./following-sibling::dd[][1]/a");
				atag.MoveTo();
				string atext = atag.InnerText.Trim();
				Validate.AreEqual(atext, TestSuite.Current.Parameters["serviceTag"].ToString(), "Check Custom Event Service tag, actual = {0}, expect = {1}");
			}catch(Exception){
			}
			
			
			
			// application name
			try
			{
				ddtag = repo.DellApplicationWebServiceDAWS.DtTagApplicationName.FindSingle<DdTag>("./following-sibling::dd[][1]");
				ddtag.MoveTo();
				ddtext = ddtag.InnerText.Trim();
				Validate.AreEqual(ddtext, varApplicationName, "Check Custom Event ApplicationName, actual = {0}, expect = {1}");
			}catch(Exception){
			}
			
			
			
			// appversion
			try
			{
				ddtag = repo.DellApplicationWebServiceDAWS.DtTagAppVersion.FindSingle<DdTag>("./following-sibling::dd[][1]");
				ddtag.MoveTo();
				ddtext = ddtag.InnerText.Trim();
				
				Validate.AreEqual(ddtext, varAppVersion, "Check Custom Event AppVersion, actual = {0}, expect = {1}");
			}catch(Exception){
			}
			
			
			
			// EventTypeName
			try
			{
				ddtag = repo.DellApplicationWebServiceDAWS.DtTagEventTypeName.FindSingle<DdTag>("./following-sibling::dd[][1]");
				ddtag.MoveTo();
				ddtext = ddtag.InnerText.Trim();
				Validate.AreEqual(ddtext, TestSuite.Current.Parameters["eventTypeName"].ToString(), "Check Custom Event Type Name, actual = {0}, expect = {1}");
			}catch(Exception){
			}
			
			
			
			//Event Created Date Time
			try
			{
				ddtag = repo.DellApplicationWebServiceDAWS.DtTagEventCreatedDateTime.FindSingle<DdTag>("./following-sibling::dd[][1]");
				ddtag.MoveTo();
				ddtext = ddtag.InnerText.Trim();
				//convert ddtext to date
				 string[] arrListStr = ddtext.Split(' ');
				 ddtext = Convert.ToDateTime(arrListStr[0]).ToString("dd/MM/yyyy");
				 
				//Report.Failure(ddtext+TestSuite.Current.Parameters["eventTypeName"].ToString());
				
				//DateTime datetoday = DateTime.Today;
				string dateTime = System.DateTime.Today.ToString("dd/MM/yyyy");
				Validate.AreEqual(ddtext, dateTime, "Check Event Created Date Time, actual = {0}, expect = {1}");
			}catch(Exception){
			}
			
			
			//Event Date Time
			try
			{
				ddtag = repo.DellApplicationWebServiceDAWS.DtTagEventDateTime.FindSingle<DdTag>("./following-sibling::dd[][1]");
				ddtag.MoveTo();
				ddtext = ddtag.InnerText.Trim();
				//convert ddtext to date
				 string[] arrListStr = ddtext.Split(' ');
				 ddtext = Convert.ToDateTime(arrListStr[0]).ToString("dd/MM/yyyy");
				string dateTime = System.DateTime.Today.ToString("dd/MM/yyyy");
				Validate.AreEqual(ddtext, dateTime, "Check Event Date Time, actual = {0}, expect = {1}");
			}catch(Exception){
			}
			
			
			Delay.Seconds(5);
		}
	}
}