///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Globalization;
using System.Net;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

using DHSAutomation.Common;

namespace DHSAutomation.Keywords.Validation
{
	public partial class CheckLanguageFeedBackPage
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void CheckLanguageText()
		{
			string osLanguage = Utils.GetOSLanguage().Name.ToLower();
			// check language
			
			DivTag body= Host.Local.FindSingle<DivTag>(@"/dom[@domain='collect.iperceptions.com']//div[@id='QtnId-All']", 60000);
			
			string text = StripHTML(body.GetInnerHtml());
			
			Dictionary<string, float> detectedLanguages = null;
			string osLanguageCode = osLanguage.Substring(0,2);
			string languageScope = "en - zh - pt - ja - fr - es - de";
			
			string expectedLanguage = osLanguageCode;
			if(!languageScope.Contains(osLanguageCode)){
				expectedLanguage = "en";
			}
			string expectedLanguageName = (new CultureInfo(expectedLanguage)).DisplayName;
			
			Regex rgx = new Regex(@"[\t]");
			string result = rgx.Replace(text, " ");
			
			string[] lines = Regex.Split(result, @"(\n)+");
			bool inOSLang = true;
			
			foreach(string line in lines){
				if(line.Trim() == "" || line.Trim() == @"\n"){
					continue;
				}
				
				detectedLanguages = Utils.InWhichLanguages(line.Trim());
				
				if(detectedLanguages.Count > 0 && !detectedLanguages.ContainsKey(expectedLanguage)){
					string detectedLanguageNames = "";
					foreach(string key in detectedLanguages.Keys){
						string lang = (new CultureInfo(key)).DisplayName;
						detectedLanguageNames += "[" + lang + ", confident:" + detectedLanguages[key] + "], ";
					}
					
					inOSLang = false;
					Report.Log(ReportLevel.Failure,
					           "Detected on the Feed Back page contains string not in Scope language: {" + expectedLanguageName +"}, " +
					           "but in following languages: {" + detectedLanguageNames + "} " +
					           "Refer string: " + line);
					
				}
				/*
				else{
					Report.Log(ReportLevel.Success,
					           "Detected on the Feed Back page contains string in Scope language: {" + expectedLanguageName +"}, " +
					           "Refer string: " + line);
				}*/
			}
			if(inOSLang == true){
				Report.Log(ReportLevel.Success, "The Feed Back Page is in Expected language: {" + expectedLanguageName +"}");
			}
		}
		
		public static string StripHTML(string HTMLText, bool decode = true) {
			Regex reg = new Regex("<[^>]+>", RegexOptions.IgnoreCase);
			var stripped = reg.Replace(HTMLText, "");
			return decode ? WebUtility.HtmlDecode(stripped) : stripped;
		}

	}
}