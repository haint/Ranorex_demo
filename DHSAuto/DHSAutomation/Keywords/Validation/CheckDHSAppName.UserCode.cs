///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using WinForms = System.Windows.Forms;
using System.Globalization;
using System.Net;
using System.IO;
using System.Web.Script.Serialization;
using System.Collections;
using System.Xml;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace DHSAutomation.Keywords.Validation
{
	public partial class CheckDHSAppName
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public CultureInfo GetOSLanguage(){
			//get os language
			CultureInfo ci = CultureInfo.InstalledUICulture;
			Console.WriteLine("Installed Language Info:{0}", ci.Name);
			ci = CultureInfo.CurrentUICulture;
			Console.WriteLine("Current UI Language Info: {0}", ci.Name);
			ci = CultureInfo.CurrentCulture;
			Console.WriteLine("Current Language Info: {0}", ci.Name);
			return ci;
		}
		
		public void CheckAppName()
		{
			CultureInfo ci = GetOSLanguage();
			Delay.Milliseconds(3000);
			// check splash screen app name is in OS language
			if(isConfirmManualSteps.Equals("True")){
				string msg = "Check if the DHS App name on Splash screen is in OS language.\n\n" +
					"Is DHS App name on Splash screen in " + ci.DisplayName + "? (Yes/No)";
				string msgResult = "DHS App name on Splash screen in " + ci.DisplayName ;
				DialogResult result =  WinForms.MessageBox.Show(new WinForms.Form{TopMost = true},
				                                                msg, "Confirm Step",
				                                                WinForms.MessageBoxButtons.YesNo,
				                                                WinForms.MessageBoxIcon.Question,
				                                                WinForms.MessageBoxDefaultButton.Button1);
				Report.Log(result == DialogResult.Yes?ReportLevel.Success:ReportLevel.Failure, msgResult);
			}
			
			// get app name
			Text appNameObject = repo.DHSMainWindow.Self.FindSingle<Text>("./text[1]");
			string appName = appNameObject.TextValue;
			Console.Out.WriteLine(appName);
			
			try{
				string expectedAppName = GetAppNameByLanguage(ci.Name);
				Validate.AreEqual(appName, expectedAppName, "DHS App Name on masthead " + appName + " is in " + ci.DisplayName);
				/*
				 *
				string language = InWhichLanguage(appName);
				Validate.AreEqual(ci.Name.Substring(0, 2), language, "DHS App Name on masthead " + appName + " is in " + ci.DisplayName);
				 */
			}
			catch(RanorexException){
				Report.Log(ReportLevel.Failure, "DHS App Name on masthead " + appName + "is NOT in " + ci.DisplayName);
			}
		}
		/*
		public string InWhichLanguage(string text){
			string language = null;
			float confident = 0;
			try
			{
				string url = CreateRequest(text);

				HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);

				using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
				{
					if (response.StatusCode != HttpStatusCode.OK)
						throw new Exception(String.Format(
							"Server error (HTTP {0}: {1}).",
							response.StatusCode,
							response.StatusDescription));
					using (var reader = new StreamReader(response.GetResponseStream()))
					{
						JavaScriptSerializer js = new JavaScriptSerializer();
						//var objects = js.Deserialize<dynamic>(reader.ReadToEnd());
						Dictionary<string,object> dict = js.Deserialize<Dictionary<string,object>>(reader.ReadToEnd());
						foreach(string key in dict.Keys)
						{
							// data
							Console.WriteLine(key);
							Dictionary<string,object> dict1 = (Dictionary<string,object>)dict[key];
							foreach(string key1 in dict1.Keys)
							{
								// detection
								Console.WriteLine(key1);
								object array = dict1[key1];
								foreach(Dictionary<string, object> dict2 in (ArrayList)array){
									foreach(string key2 in dict2.Keys)
									{
										string lang = dict2["language"].ToString();
										float conf = float.Parse(dict2["confidence"].ToString());
										if(conf > confident){
											language = lang;
										}
										Console.WriteLine(key2 + ":" + dict2[key2].ToString());
									}
								}
							}
						}
					}
				}
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}
			return language;
		}
		
		public string CreateRequest(string queryString)
		{
			string UrlRequest = "http://ws.detectlanguage.com/0.2/detect?q="+queryString+"&key=demo";
			return (UrlRequest);
		}
		*/
		
		// xml reader get application name
		public string GetAppNameByLanguage(string language){
			string appName = null;
			XmlTextReader reader = new XmlTextReader(Directory.GetCurrentDirectory() + @"\Resources\DHSTranslate.xml");
			// If the node has value
			reader.Read();
			reader.ReadToFollowing("language");
			do {
				if(reader.GetAttribute("code") == language){
					reader.ReadToDescendant("applicationname");
					appName = reader.ReadString();
					break;
				}
			} while (reader.ReadToNextSibling("language"));

			return appName;
		}
	}
}