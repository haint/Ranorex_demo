///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Xml;

using DHSAutomation.Common;
using DHSAutomation.Objects;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using WinForms = System.Windows.Forms;

namespace DHSAutomation.Keywords.Validation
{
	public partial class Check5HelpCategories
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void CheckCategoriesOnMouseHover()
		{
			repo.DHSMainWindow.SelfInfo.WaitForExists(10000);
			DHSTranslateReader reader = new DHSTranslateReader();
			Dictionary<string, Object> categories = reader.GetCategories();
			int count = categories.Count;
			// Notify user to start check category border
			string msg = "Please observe if Categories icon will be highlight with white circle border when mouse hover.\n\n" +
				"To start walk-through " + count + " categories, Press OK";
			WinForms.MessageBox.Show(new WinForms.Form{TopMost = true},
			                         msg, "Notification",
			                         WinForms.MessageBoxButtons.OK,
			                         MessageBoxIcon.Information);
			foreach(string key in categories.Keys){
				Dictionary<string, Object> category = (Dictionary<string, Object>)categories[key];
				string title = (String)category["title"];
				Text helptext = repo.DHSMainWindow.HELPCATEGORIES.FindSingle(".");
				
				// get list of categories
				Picture categoryIcon = helptext.FindSingle<Picture>("./following-sibling::button/text[@text~'"+title+"']/preceding-sibling::picture[1]");
				categoryIcon.MoveTo();
				Delay.Milliseconds(1000);
			}
			
			if(isConfirmManualSteps.Equals("True")){
				msg = "Please confirm all Categories icon was highlighted with white circle border? (Yes/No)";
				string msgResult = "Check all Categories icon was highlighted with white circle border";
				DialogResult result =  WinForms.MessageBox.Show(new WinForms.Form{TopMost = true},
				                                                msg, "Confirm Step",
				                                                WinForms.MessageBoxButtons.YesNo,
				                                                WinForms.MessageBoxIcon.Question,
				                                                WinForms.MessageBoxDefaultButton.Button1);
				Report.Log(result == DialogResult.Yes?ReportLevel.Success:ReportLevel.Failure, msgResult);
			}
		}

		public void CheckCategoriesArticles()
		{
			DHSTranslateReader reader = new DHSTranslateReader();
			Dictionary<string, Object> categories = reader.GetCategories();
			//int i=0;
			foreach(string key in categories.Keys){
				//if(i++ > 0){
				//	break;
				//}
				Dictionary<string, Object> category = (Dictionary<string, Object>)categories[key];
				string title = (String)category["title"];
				Text helptext = repo.DHSMainWindow.HELPCATEGORIES.FindSingle(".");
				// get list of categories
				try{
					Picture categoryIcon = helptext.FindSingle<Picture>("./following-sibling::button/text[@text~'"+title+"']/preceding-sibling::picture[1]", 1000);
					Report.Log(ReportLevel.Success, "Found and Click on Category: " + title);
					categoryIcon.Click();
				}
				catch(ElementNotFoundException ex){
					Report.Log(ReportLevel.Success, "Not Found Category: " + title);
					continue;
				}
				Delay.Milliseconds(1000);
				DHSCategory.CheckCategoryOnLeftMenu(key);
				// get the first article
				Dictionary<string, Object> articles = (Dictionary<string, Object>)category["articles"];
				string firstArticle = (String)articles["#first"];
				Delay.Milliseconds(1000);
				DHSArticle.CheckArticleOnContentPanel(key, firstArticle);
				foreach(string arKey in articles.Keys){
					if(arKey != "#first" && arKey != firstArticle){
						System.Console.WriteLine(arKey + ":" + firstArticle);
						Dictionary<string, Object> article = (Dictionary<string, Object>)articles[arKey];
						string arTitle = (String)article["title"];
						// open article
						Text arText = repo.DHSMainWindow.ContentManagementControl.ArticleTitleList.FindSingle<Text>("./listitem/text[@text~'"+arTitle+"']");
						arText.Click();
						DHSArticle.CheckArticleOnContentPanel(key, arKey);
					}
				}
				// click back
				repo.DHSMainWindow.BackButton.Click();
			}
		}
		
	}
}