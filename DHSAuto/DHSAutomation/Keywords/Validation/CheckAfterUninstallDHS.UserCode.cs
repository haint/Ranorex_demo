///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;


namespace DHSAutomation.Keywords.Validation
{
	public partial class CheckAfterUninstallDHS
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}
		
		public void ConfirmInstallationCriteria(){
			// check folder remove
			checkFolderExits("C:\\Program Files\\Dell\\Dell Help & Support","No");
			// check folder exits
			checkFolderExits("C:\\ProgramData\\Dell\\Dell Help & Support\\Logs\\LearningCenterUI.log","Yes");
//			checkFolderExits("C:\\ProgramData\\Dell\\Dell Help & Support\\Logs\\Service.log","Yes");
			checkFolderExits("C:\\ProgramData\\Dell\\Dell Help & Support\\DellAgent.MDLC.00.log","Yes");
		}

		public void chooseToUninstall()
		{
			Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ControlPanel.ProgramsAndFeatures.RowDHS' at 88;14.", repo.ControlPanel.ProgramsAndFeatures.RowDHSInfo);
			IList<Cell> cellList = repo.ControlPanel.ProgramsAndFeatures.RowDHS.Find<Ranorex.Cell>("./cell");
			
			foreach(Cell cellVer in cellList){
				
				String itemName = cellVer.GetAttributeValue<String>("Text");
				if(itemName.Contains(versionApp)){
					cellVer.Click();
					break;
				}
				
			}
		}

		public void checkDHSIconOnDesktop()
		{
			if(repo.Desktop.DellHelpSupportIconInfo.Exists(3000))
			{
				Report.Log(ReportLevel.Failure, "Check DHS Icon NOT found on Desktop");
			}else{
				Report.Log(ReportLevel.Success, "Check DHS Icon NOT found on Desktop");
			}
		}

		public void checkDHSIconOnAllApps()
		{
			repo.Taskbar.Start.Click();
			Delay.Milliseconds(200);
			
			repo.Start.ContainerHash.Click();
			Delay.Milliseconds(200);
			
			repo.Start.TextD.Click();
			Delay.Milliseconds(200);
			
			Keyboard.Press("{ENTER}");
			try{
//				repo.Start.AppsList.Click(new Location(AppsList_Screenshot1, "4;4", AppsList_Screenshot1_Options));
//				Delay.Milliseconds(200);
				
				repo.Start.AppsList.MoveTo(new Location(AppsList_Screenshot2, "12;15", AppsList_Screenshot2_Options));
				Delay.Milliseconds(200);
				
				Report.Log(ReportLevel.Failure, "Check DHS Icon found on All App Start Menu");
			}
			catch(RanorexException){
				Report.Log(ReportLevel.Success, "Check DHS Icon NOT found on All App Start Menu");
			}
		
			Keyboard.Press("{Escape}");
		}

		public void checkDHSIconOnStartMenu()
		{
			repo.Taskbar.Start.Click();
			Delay.Milliseconds(200);
			
			try{
				repo.Start.GroupItems.MoveTo(new Location(GroupItems_Screenshot1, GroupItems_Screenshot1_Options));
				Delay.Milliseconds(200);
				
				if(isConfirmManualSteps.Equals("True")){
					string msg = "Please check if the DHS exits on metro tile (Yes/No)";
					string msgResult = "Dell Help & Support not found on Metro Tile!";
					WinForms.DialogResult result =  WinForms.MessageBox.Show(new WinForms.Form{TopMost = true},
					                                                         msg, "Confirm Step",
					                                                         WinForms.MessageBoxButtons.YesNo,
					                                                         WinForms.MessageBoxIcon.Question,
					                                                         WinForms.MessageBoxDefaultButton.Button1);
					Report.Log(result == WinForms.DialogResult.No?ReportLevel.Success:ReportLevel.Failure, msgResult);
				}
			}
			catch(RanorexException){
				Report.Log(ReportLevel.Success, "Can't find DHS on Start Menu. Uninstall Dell Help & Support success!");
			}
			
			Delay.Milliseconds(3000);
		}

		public void checkFolderExits(string path, string action)
		{
			// press Window E open file explorer
			Ranorex.Keyboard.Press("{LWin down}e{LWin up}");
			Delay.Milliseconds(1000);
			
			System.Diagnostics.Debug.WriteLine(path);
			// split path into item
			string[] dir = path.Split('\\');
			string fileExplorerXpath = null;
			
			bool found = true;

			for(int i=0; i< dir.Length; i++){
				System.Diagnostics.Debug.WriteLine(dir[i]);
				if(i==0){
					repo.Explorer.ToolBar1001.Click();
					Ranorex.Keyboard.Press(dir[i]);
					Ranorex.Keyboard.Press("{Return}");
					fileExplorerXpath = "/form[@processname='explorer' and @title='" + "OS (" + dir[i] + ")']";
				}
				else{
					// find file explorer
					Ranorex.Form fileExplorer = null;
					Ranorex.Core.Element element =  Host.Local.FindSingle(fileExplorerXpath,5000);
					if(element != null){
						fileExplorer = element;
					}
					// check if folder exist
					string folderXpath = "element[@class='ShellTabWindowClass']//element[@instance='1']/container[@caption='ShellView']/list/listitem[@text='"+ dir[i] +"']";
					
					try{
						ListItem folder =  fileExplorer.FindSingle<ListItem>(folderXpath,5000);
						
						if(i<dir.Length-1){
							folder.DoubleClick();
							Delay.Milliseconds(500);
						}
						
					}
					catch(ElementNotFoundException){
						// report fail
//						Report.Log(ReportLevel.Failure, "Folder not found: " + path);
						found = false;
						break;
						// throw ex;
						
					}
					
					fileExplorerXpath = "/form[@processname='explorer' and @title='" + dir[i] + "']";
					
				}
			}
			
			// report
			if(action.Equals("No")){
				Report.Log((found==false)?ReportLevel.Success:ReportLevel.Failure, "Check Folder not Exist: " + path);
			}
			else{
				Report.Log((found==true)?ReportLevel.Success:ReportLevel.Failure, "Check Folder Exist: " + path);
			}
			
			// close file explorer
			repo.Explorer.Close.Click();
		}

		public void checkRegistryKeyExist()
		{
			string regKey = @"HKEY_LOCAL_MACHINE/SOFTWARE/Dell/Dell Help & Support";
			// open regedit
			Keyboard.Press("{LWin down}r{LWin up}");
			Delay.Milliseconds(200);
			
			Keyboard.Press("regedit");
			Delay.Milliseconds(200);
			
			Keyboard.Press("{Return}");
			Delay.Milliseconds(200);
			
			// click Computer Root Item
			TreeItem parentKey = repo.RegistryEditor.Computer.FindSingle(".");
			
			ExpandRegTreeItem(parentKey);
			
			// split path into item
			string[] key = regKey.Split('/');
			for(int i=0; i< key.Length; i++){
				// select & open child key
				string childKeyXpath = @"./treeitem[@text='" + key[i] + "']";
				TreeItem childKey = null;
				try{
					childKey = parentKey.FindSingle(childKeyXpath);
				}
				catch(ElementNotFoundException){
					// report failure
					Report.Log(ReportLevel.Success, "Registry KEY not found: " + key[i]);
					break;
				}
				childKey.Click();
				ExpandRegTreeItem(childKey);
				Delay.Milliseconds(500);
				parentKey = childKey;
				if(i == key.Length - 1){
					// report success
					Report.Log(ReportLevel.Failure, "Registry KEY found: " + regKey);
				}
			}
			// close regedit
			repo.RegistryEditor.Close.Click();
		}
		public void ExpandRegTreeItem(TreeItem item)
		{
			item.Click(System.Windows.Forms.MouseButtons.Right);
			// expand key
			try{
				repo.Regedit.ExpandInfo.WaitForExists(500);
				if(repo.Regedit.Expand.Enabled){
					repo.Regedit.Expand.Click();
				}
				else{
					Keyboard.Press("{Escape}");
				}
			}
			catch(RanorexException){
				Keyboard.Press("{Escape}");
			}
		}

		public void checkService()
		{
			// open services
			Keyboard.Press("{LWin down}r{LWin up}");
			Delay.Milliseconds(200);
			
			Keyboard.Press("services.msc");
			Delay.Milliseconds(200);
			
			Keyboard.Press("{Return}");
			Delay.Milliseconds(200);
			
			// select dell help & support
			//get all services
			IList<Row> allServiceList = repo.Services.ServiceList.Find<Ranorex.Row>(@"./row");
			int allServiceCount = allServiceList.Count;
			
			int index = 0;
			Row selectService = null;
			
			do{
				//get all visible service
				IList<Row> serviceList = repo.Services.ServiceList.Find<Ranorex.Row>(@"./row[@Visible='True']");
				int serviceCount = serviceList.Count;
				System.Diagnostics.Debug.WriteLine(serviceCount);
				Row lastItem = null;
				foreach(Row srv in serviceList){
					Cell srvNameCell = srv.FindSingle<Cell>(@"./cell[1]");
					string srvName = srvNameCell.GetAttributeValue<String>("Text");
					if(srvName.Contains("Dell Help & Support")){
						selectService = srv;
						break;
					}
					System.Diagnostics.Debug.WriteLine(srvName);
					Console.Out.WriteLine(srvName);
					lastItem = srv;
				}
				
				if(selectService == null){
					lastItem.Click();
					Delay.Milliseconds(500);
					// push page-down key
					Ranorex.Keyboard.Press("{PageDown}");
					Delay.Milliseconds(1000);
				}
				index = index + serviceCount;
			}
			while(selectService == null && index < allServiceCount - 1);
			if(selectService==null){
				Report.Log(ReportLevel.Success, "Can't find Service. Dell Help & Support uninstall success!");
			}else{
				Report.Log(ReportLevel.Failure,"Can find Service DHS!");
			}
			
			Delay.Milliseconds(200);
			//close task manager
			repo.Services.Close.Click();
		}
		
		#region Image Feature Data
		
		CompressedImage AppsList_Screenshot1
		{ get { return repo.Start.AppsListInfo.GetScreenshot1(new Rectangle(27, 51, 8, 8)); } }

		Imaging.FindOptions AppsList_Screenshot1_Options
		{ get { return Imaging.FindOptions.Default; } }

		CompressedImage AppsList_Screenshot2
		{ get { return repo.Start.AppsListInfo.GetScreenshot2(new Rectangle(31, 81, 18, 19)); } }

		Imaging.FindOptions AppsList_Screenshot2_Options
		{ get { return Imaging.FindOptions.Default; } }

		CompressedImage GroupItems_Screenshot1
		{ get { return repo.Start.GroupItemsInfo.GetScreenshot1(new Rectangle(19, 480, 18, 18)); } }

		Imaging.FindOptions GroupItems_Screenshot1_Options
		{ get { return Imaging.FindOptions.Default; } }
		
		CompressedImage AppsList_Screenshot3
		{ get { return repo.Start.AppsListInfo.GetScreenshot3(new Rectangle(16, 3, 8, 9)); } }

		Imaging.FindOptions AppsList_Screenshot3_Options
		{ get { return Imaging.FindOptions.Parse("0.9;None;0,0,0,0;True;10000000;5000ms"); } }

		CompressedImage AppsList_Screenshot4
		{ get { return repo.Start.AppsListInfo.GetScreenshot4(new Rectangle(2, 1, 18, 17)); } }

		Imaging.FindOptions AppsList_Screenshot4_Options
		{ get { return Imaging.FindOptions.Parse("0.9;None;0,0,0,0;True;10000000;5000ms"); } }

		#endregion
	}
}