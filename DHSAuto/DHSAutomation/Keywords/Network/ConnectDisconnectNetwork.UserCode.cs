///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace DHSAutomation.Keywords.Network
{
	public partial class ConnectDisconnectNetwork
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void DoConnectDisconnectNetwork()
		{
			string expectedStatus = varExpectedNetworkStatus;
			string originStatus = TestSuite.Current.Parameters["networkConnectionStatus"];
			string originName = TestSuite.Current.Parameters["networkConnectionName"];
			System.Console.WriteLine(expectedStatus);
			bool isActionSucceeded = false;
			
			if(expectedStatus == "Connected"){
				if(!IsNetworkConnected()){
					// do connect
					if(originStatus == "Connected"){
						ListItem item = repo.Network.NetworkConnectionPanel.NetworkConnectionList.FindSingle<ListItem>("./listitem[@text='"+originName+"']");
						isActionSucceeded = DoEnable(item, true);
					}
					else{
						do{
							try{
								ListItem disabledItem = repo.Network.NetworkConnectionPanel.NetworkConnectionList.FindSingle<ListItem>("./listitem/text[@childindex=3 and @text='Disabled']/parent::listitem");
								isActionSucceeded = DoEnable(disabledItem, true);
							}
							catch(RanorexException ex){
								break;
							}
						}
						while(true);
						/*
						try{
							// ethernet connection
							IList<ListItem> ethernets = repo.Network.NetworkConnectionPanel.NetworkConnectionList.Find<ListItem>("./listitem[@text~'Ethernet']/text[@ChildIndex=3 and @text='Disabled']/parent::listitem");
							foreach(ListItem ethernet in ethernets){
								isActionSucceeded = DoEnable(ethernet, true);
								if(isActionSucceeded){
									break;
								}
							}
						}
						catch(RanorexException ex){
							// wifi	connection
							
						}
						*/
					}
				}
			}
			else{
				if(IsNetworkConnected()){
					// do disconnect all
					do{
						try{
							repo.Network.NetworkConnectionPanel.NetworkConnectedItemsInfo.WaitForExists(new Duration(15000));
							ListItem connectedItems = repo.Network.NetworkConnectionPanel.NetworkConnectedItems.FindSingle<ListItem>(".");
							isActionSucceeded = DoEnable(connectedItems, false);
						}
						catch(RanorexException ex){
//							Console.WriteLine(ex.ToString());
//							Console.ReadLine();
							break;
						}
					}
					while(true);
				}
			}
		}
		
		public bool DoEnable(ListItem item, bool isEnable){
			bool isActionSucceeded = false;
			
			if(isEnable){
				// do enable
				item.Click(System.Windows.Forms.MouseButtons.Right);
				Delay.Milliseconds(1000);
				// select disable
				MenuItem menuitem = repo.ContextMenu.Self.FindSingle<MenuItem>("./?/?/menuitem[@accessiblename='Enable']");
				menuitem.Click();
				int i = 0;
				do{
					Delay.Milliseconds(3000);
					Text text = item.FindSingle<Text>("./text[@childindex=3]");
					string status = text.TextValue;
					if(status != "Not connected" && status != "Identifing..." && status != "Disabled" && status != "Network cable unplugged" && status!= "Unidentified network"){
						isActionSucceeded = true;
						break;
					}
					i++;
				}
				while(i < 3);
			}
			else{
				// do disable
				item.Click(System.Windows.Forms.MouseButtons.Right);
				Delay.Milliseconds(1000);
				// select disable
				MenuItem menuitem = repo.ContextMenu.Self.FindSingle<MenuItem>("./?/?/menuitem[@accessiblename='Disable']");
				menuitem.Click();
				int i = 0;
				do{
					Delay.Milliseconds(3000);
					Text text = item.FindSingle<Text>("./text[@childindex=3]");
					string status = text.TextValue;
					if(status == "Disabled"){
						isActionSucceeded = true;
						break;
					}
					i++;
				}
				while(i < 3);
			}
			return isActionSucceeded;
		}
		
		public bool IsNetworkConnected(){
			bool isConnected = true;
			try{
				repo.Network.NetworkConnectionPanel.NetworkConnectedItemsInfo.WaitForExists(new Duration(3000));
			}
			catch(RanorexException ex){
				isConnected = false;
			}
			return isConnected;
		}
	}
}