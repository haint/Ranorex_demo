///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using WinForms = System.Windows.Forms;

using DHSAutomation.Objects;

namespace DHSAutomation.Keywords.DellSystemInfo
{
	public partial class LoadDellSystemInfo
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			while(!Objects.Internet.IsConnectToInternetOKWithOutConfig())
			{
				MessageBox.Show(new WinForms.Form { TopMost = true },"The SUT does not connect to the internet. Please connect to the internect and click OK when you are done.");
			}
			Report.Log(ReportLevel.Info, "Website", "Opening web site 'http://dell.com/support' with browser 'IE' in maximized mode.");
			Host.Local.OpenBrowser("http://dell.com/support", "IE", "", false, true, false, false, false);
			Delay.Milliseconds(500);
			
//			if IE11 runs at first time, the FirstRunWizard must be closed
			firstRun fr = new firstRun();
			fr.checkIEForm();
			
			Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Detect Product'.");
			repo.DellSupport.ProductSupportDellUS.BtnDetectmyProductInfo.WaitForExists(120000);
			repo.DellSupport.ProductSupportDellUS.BtnDetectmyProduct.Click();
			Delay.Seconds(5);
			int i = 0;
			while(true){
				if(repo.DellSupport.ProductSupportDellUS.BtnDetectmyProductInfo.Exists(5000)){
					repo.DellSupport.ProductSupportDellUS.BtnDetectmyProduct.Click();
					i++;
					if(i>=50){
						break;
					}
				}else{
					break;
				}
				Delay.Seconds(5);
				
			}
			
			repo.DellSupport.ProductSupportDellUS.ProductNameInfo.WaitForExists(120000);
			if(repo.DellSupport.ProductSupportDellUS.ProductNameInfo.Exists(5000)){
				Report.Info("Check Infomation is ready or not.");
				repo.DellSupport.ProductSupportDellUS.ProductName.Click();
				//=> continue getinfo
			}else{
				//start setup for getinfo
				repo.DHS_HaiNT21_Page.AgreeTerm.Click();
				Delay.Seconds(3);
				repo.DHS_HaiNT21_Page.Continue.Click();
				Delay.Seconds(30);
				Keyboard.Press(System.Windows.Forms.Keys.W | System.Windows.Forms.Keys.Control, 17, Keyboard.DefaultKeyPressTime, 1, true);
				//Keyboard.Press(System.Windows.Forms.Keys.W | System.Windows.Forms.Keys.Control, 17, Keyboard.DefaultKeyPressTime, 1, true);
				
				Report.Log(ReportLevel.Info, "Website", "Opening web site 'http://dell.com/support' with browser 'IE' in maximized mode.");
				Host.Local.OpenBrowser("http://dell.com/support", "IE", "", false, true, false, false, false);
				Delay.Milliseconds(0);
				Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Detect Product'.");
				while(repo.DellSupport.ProductSupportDellUS.BtnDetectmyProductInfo.Exists(1000)){
					repo.DellSupport.ProductSupportDellUS.BtnDetectmyProduct.Click();
					Delay.Seconds(5);
				}
			}
			
			
			GetDellSystemInfo();
			Delay.Milliseconds(0);
			
			
			Delay.Duration(3000, false);
			
			// Close browser window
			Report.Log(ReportLevel.Info, "Keyboard", "Close browser window\r\nKey 'Ctrl+W' Press.");
			Keyboard.Press(System.Windows.Forms.Keys.W | System.Windows.Forms.Keys.Control, 17, Keyboard.DefaultKeyPressTime, 1, true);
			Delay.Milliseconds(0);
		}

		public void GetDellSystemInfo()
		{
			Report.Log(ReportLevel.Info, "Get Platform Name and store into Global Parameter");
			repo.DellSupport.ProductSupportDellUS.ProductName.MoveTo(Location.UpperLeft);
			string platformName = repo.DellSupport.ProductSupportDellUS.ProductName.InnerText;
			TestSuite.Current.Parameters["platformName"] = platformName;
			Delay.Milliseconds(1000);
			
			Report.Log(ReportLevel.Info, "Get Service Tag and store into Global Parameter");
			repo.DellSupport.ProductSupportDellUS.ProductServiceTag.MoveTo(Location.UpperLeft);
			string serviceTag = repo.DellSupport.ProductSupportDellUS.ProductServiceTag.InnerText;
			serviceTag = serviceTag.Replace("\n", "").Trim();
			var regex = new Regex(@"([A-Z0-9]{7}$)");
			if (regex.IsMatch(serviceTag))
			{
				serviceTag  = regex.Match(serviceTag).Groups[0].Value;
				Console.WriteLine("This is my serviceTag text: {0}", serviceTag);
			}
			TestSuite.Current.Parameters["serviceTag"] = serviceTag;
			Delay.Milliseconds(1000);
			
			Report.Log(ReportLevel.Info, "Get Express Service Tag and store into Global Parameter");
			repo.DellSupport.ProductSupportDellUS.ProductExpressServiceTag.MoveTo(Location.UpperLeft);
			string expressServiceCode = repo.DellSupport.ProductSupportDellUS.ProductExpressServiceTag.InnerText;
			var regex1 = new Regex(@"([0-9]{10}$)");
			expressServiceCode = expressServiceCode.Replace("\n", "").Trim();
			if (regex1.IsMatch(expressServiceCode))
			{
				expressServiceCode  = regex1.Match(expressServiceCode).Groups[0].Value;
				Console.WriteLine("This is my expressServiceCode text: {0}", expressServiceCode);
			}
			TestSuite.Current.Parameters["expressServiceCode"] = expressServiceCode;
			Delay.Milliseconds(1000);
		}

        public void dummy()
        {
        }
		
	}
}